
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # azurerm_kubernetes_cluster.k8s[0m will be created
[0m  [32m+[0m[0m resource "azurerm_kubernetes_cluster" "k8s" {
      [32m+[0m[0m api_server_authorized_ip_ranges     = (known after apply)
      [32m+[0m[0m current_kubernetes_version          = (known after apply)
      [32m+[0m[0m dns_prefix                          = "k8stest"
      [32m+[0m[0m fqdn                                = (known after apply)
      [32m+[0m[0m http_application_routing_zone_name  = (known after apply)
      [32m+[0m[0m id                                  = (known after apply)
      [32m+[0m[0m image_cleaner_enabled               = false
      [32m+[0m[0m image_cleaner_interval_hours        = 48
      [32m+[0m[0m kube_admin_config                   = (sensitive value)
      [32m+[0m[0m kube_admin_config_raw               = (sensitive value)
      [32m+[0m[0m kube_config                         = (sensitive value)
      [32m+[0m[0m kube_config_raw                     = (sensitive value)
      [32m+[0m[0m kubernetes_version                  = (known after apply)
      [32m+[0m[0m location                            = "eastus"
      [32m+[0m[0m name                                = "k8stest"
      [32m+[0m[0m node_resource_group                 = (known after apply)
      [32m+[0m[0m node_resource_group_id              = (known after apply)
      [32m+[0m[0m oidc_issuer_url                     = (known after apply)
      [32m+[0m[0m portal_fqdn                         = (known after apply)
      [32m+[0m[0m private_cluster_enabled             = false
      [32m+[0m[0m private_cluster_public_fqdn_enabled = false
      [32m+[0m[0m private_dns_zone_id                 = (known after apply)
      [32m+[0m[0m private_fqdn                        = (known after apply)
      [32m+[0m[0m public_network_access_enabled       = true
      [32m+[0m[0m resource_group_name                 = (known after apply)
      [32m+[0m[0m role_based_access_control_enabled   = true
      [32m+[0m[0m run_command_enabled                 = true
      [32m+[0m[0m sku_tier                            = "Free"
      [32m+[0m[0m support_plan                        = "KubernetesOfficial"
      [32m+[0m[0m tags                                = {
          [32m+[0m[0m "Environment" = "Development"
        }
      [32m+[0m[0m workload_identity_enabled           = false

      [32m+[0m[0m default_node_pool {
          [32m+[0m[0m kubelet_disk_type    = (known after apply)
          [32m+[0m[0m max_pods             = (known after apply)
          [32m+[0m[0m name                 = "harrypool"
          [32m+[0m[0m node_count           = 3
          [32m+[0m[0m node_labels          = (known after apply)
          [32m+[0m[0m orchestrator_version = (known after apply)
          [32m+[0m[0m os_disk_size_gb      = (known after apply)
          [32m+[0m[0m os_disk_type         = "Managed"
          [32m+[0m[0m os_sku               = "AzureLinux"
          [32m+[0m[0m scale_down_mode      = "Delete"
          [32m+[0m[0m type                 = "VirtualMachineScaleSets"
          [32m+[0m[0m ultra_ssd_enabled    = false
          [32m+[0m[0m vm_size              = "Standard_D2_v2"
          [32m+[0m[0m workload_runtime     = (known after apply)
        }

      [32m+[0m[0m linux_profile {
          [32m+[0m[0m admin_username = "azurelinux"

          [32m+[0m[0m ssh_key {
              [32m+[0m[0m key_data = <<-EOT
                    ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDTD0GNlRaByU+jBs61g9SBCECgPdyL5/hizqMdGMb8qQywzzd40du0LMERgeAGbsVKFSAJWUAUq4pcyWYnsHLeElFOe6ruleHelUD9GRDKxSgBW3faZrV06lMqtu2HkOw++UzXZTatQhhlKzUc812VbqBMg+SbmZdYkukhxVB0n52vrGR+UKYbofA9N5ED3ufLCwMnTfgMlU+YcW4/xmxB62BP4JxxxxxxxxxgVRFiBYcd8AeUysVVTiyiYykn8XHnRXnJgSxxxxxxxxxxxxxxxxxxqU1uiKR+2Um7ZPPql1PoCW632df1Qk89sS2SSk1krloSxy4g3kDralhNJ1bORzEXoPK297zHyLATpYQ== root@Harrypc
                EOT
            }
        }

      [32m+[0m[0m network_profile {
          [32m+[0m[0m dns_service_ip     = (known after apply)
          [32m+[0m[0m docker_bridge_cidr = (known after apply)
          [32m+[0m[0m ip_versions        = (known after apply)
          [32m+[0m[0m load_balancer_sku  = "standard"
          [32m+[0m[0m network_mode       = (known after apply)
          [32m+[0m[0m network_plugin     = "kubenet"
          [32m+[0m[0m network_policy     = (known after apply)
          [32m+[0m[0m outbound_type      = "loadBalancer"
          [32m+[0m[0m pod_cidr           = (known after apply)
          [32m+[0m[0m pod_cidrs          = (known after apply)
          [32m+[0m[0m service_cidr       = (known after apply)
          [32m+[0m[0m service_cidrs      = (known after apply)
        }

      [32m+[0m[0m service_principal {
          [32m+[0m[0m client_id     = "bba80fdc-2876-4ea5-83c3-49xxxxxxx"
          [32m+[0m[0m client_secret = (sensitive value)
        }
    }

[1m  # azurerm_log_analytics_solution.test[0m will be created
[0m  [32m+[0m[0m resource "azurerm_log_analytics_solution" "test" {
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m location              = "eastus"
      [32m+[0m[0m resource_group_name   = (known after apply)
      [32m+[0m[0m solution_name         = "ContainerInsights"
      [32m+[0m[0m workspace_name        = (known after apply)
      [32m+[0m[0m workspace_resource_id = (known after apply)

      [32m+[0m[0m plan {
          [32m+[0m[0m name      = (known after apply)
          [32m+[0m[0m product   = "OMSGallery/ContainerInsights"
          [32m+[0m[0m publisher = "Microsoft"
        }
    }

[1m  # azurerm_log_analytics_workspace.test[0m will be created
[0m  [32m+[0m[0m resource "azurerm_log_analytics_workspace" "test" {
      [32m+[0m[0m allow_resource_only_permissions = true
      [32m+[0m[0m daily_quota_gb                  = -1
      [32m+[0m[0m id                              = (known after apply)
      [32m+[0m[0m internet_ingestion_enabled      = true
      [32m+[0m[0m internet_query_enabled          = true
      [32m+[0m[0m local_authentication_disabled   = false
      [32m+[0m[0m location                        = "eastus"
      [32m+[0m[0m name                            = (known after apply)
      [32m+[0m[0m primary_shared_key              = (sensitive value)
      [32m+[0m[0m resource_group_name             = (known after apply)
      [32m+[0m[0m retention_in_days               = (known after apply)
      [32m+[0m[0m secondary_shared_key            = (sensitive value)
      [32m+[0m[0m sku                             = "PerGB2018"
      [32m+[0m[0m workspace_id                    = (known after apply)
    }

[1m  # azurerm_resource_group.rg[0m will be created
[0m  [32m+[0m[0m resource "azurerm_resource_group" "rg" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m location = "eastus"
      [32m+[0m[0m name     = (known after apply)
    }

[1m  # kubernetes_deployment.mariadb[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_deployment" "mariadb" {
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m wait_for_rollout = true

      [32m+[0m[0m metadata {
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "mariadb"
          [32m+[0m[0m namespace        = "default"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }

      [32m+[0m[0m spec {
          [32m+[0m[0m min_ready_seconds         = 0
          [32m+[0m[0m paused                    = false
          [32m+[0m[0m progress_deadline_seconds = 600
          [32m+[0m[0m replicas                  = "1"
          [32m+[0m[0m revision_history_limit    = 10

          [32m+[0m[0m selector {
              [32m+[0m[0m match_labels = {
                  [32m+[0m[0m "app" = "mariadb"
                }
            }

          [32m+[0m[0m template {
              [32m+[0m[0m metadata {
                  [32m+[0m[0m generation       = (known after apply)
                  [32m+[0m[0m labels           = {
                      [32m+[0m[0m "app" = "mariadb"
                    }
                  [32m+[0m[0m name             = (known after apply)
                  [32m+[0m[0m resource_version = (known after apply)
                  [32m+[0m[0m uid              = (known after apply)
                }
              [32m+[0m[0m spec {
                  [32m+[0m[0m automount_service_account_token  = true
                  [32m+[0m[0m dns_policy                       = "ClusterFirst"
                  [32m+[0m[0m enable_service_links             = true
                  [32m+[0m[0m host_ipc                         = false
                  [32m+[0m[0m host_network                     = false
                  [32m+[0m[0m host_pid                         = false
                  [32m+[0m[0m hostname                         = (known after apply)
                  [32m+[0m[0m node_name                        = (known after apply)
                  [32m+[0m[0m restart_policy                   = "Always"
                  [32m+[0m[0m scheduler_name                   = (known after apply)
                  [32m+[0m[0m service_account_name             = (known after apply)
                  [32m+[0m[0m share_process_namespace          = false
                  [32m+[0m[0m termination_grace_period_seconds = 30

                  [32m+[0m[0m container {
                      [32m+[0m[0m image                      = "mariadb:latest"
                      [32m+[0m[0m image_pull_policy          = (known after apply)
                      [32m+[0m[0m name                       = "mariadb"
                      [32m+[0m[0m stdin                      = false
                      [32m+[0m[0m stdin_once                 = false
                      [32m+[0m[0m termination_message_path   = "/dev/termination-log"
                      [32m+[0m[0m termination_message_policy = (known after apply)
                      [32m+[0m[0m tty                        = false

                      [32m+[0m[0m env {
                          [32m+[0m[0m name  = "MARIADB_ROOT_PASSWORD"
                          [32m+[0m[0m value = "P@ssw0rd"
                        }

                      [32m+[0m[0m port {
                          [32m+[0m[0m container_port = 3306
                          [32m+[0m[0m protocol       = "TCP"
                        }
                    }

                  [32m+[0m[0m volume {
                      [32m+[0m[0m name = "mariadb-pvc"
                    }
                }
            }
        }
    }

[1m  # kubernetes_deployment.wordpress[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_deployment" "wordpress" {
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m wait_for_rollout = true

      [32m+[0m[0m metadata {
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "wordpress"
          [32m+[0m[0m namespace        = "default"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }

      [32m+[0m[0m spec {
          [32m+[0m[0m min_ready_seconds         = 0
          [32m+[0m[0m paused                    = false
          [32m+[0m[0m progress_deadline_seconds = 600
          [32m+[0m[0m replicas                  = "1"
          [32m+[0m[0m revision_history_limit    = 10

          [32m+[0m[0m selector {
              [32m+[0m[0m match_labels = {
                  [32m+[0m[0m "app" = "wordpress"
                }
            }

          [32m+[0m[0m template {
              [32m+[0m[0m metadata {
                  [32m+[0m[0m generation       = (known after apply)
                  [32m+[0m[0m labels           = {
                      [32m+[0m[0m "app" = "wordpress"
                    }
                  [32m+[0m[0m name             = (known after apply)
                  [32m+[0m[0m resource_version = (known after apply)
                  [32m+[0m[0m uid              = (known after apply)
                }
              [32m+[0m[0m spec {
                  [32m+[0m[0m automount_service_account_token  = true
                  [32m+[0m[0m dns_policy                       = "ClusterFirst"
                  [32m+[0m[0m enable_service_links             = true
                  [32m+[0m[0m host_ipc                         = false
                  [32m+[0m[0m host_network                     = false
                  [32m+[0m[0m host_pid                         = false
                  [32m+[0m[0m hostname                         = (known after apply)
                  [32m+[0m[0m node_name                        = (known after apply)
                  [32m+[0m[0m restart_policy                   = "Always"
                  [32m+[0m[0m scheduler_name                   = (known after apply)
                  [32m+[0m[0m service_account_name             = (known after apply)
                  [32m+[0m[0m share_process_namespace          = false
                  [32m+[0m[0m termination_grace_period_seconds = 30

                  [32m+[0m[0m container {
                      [32m+[0m[0m image                      = "wordpress:latest"
                      [32m+[0m[0m image_pull_policy          = (known after apply)
                      [32m+[0m[0m name                       = "wordpress"
                      [32m+[0m[0m stdin                      = false
                      [32m+[0m[0m stdin_once                 = false
                      [32m+[0m[0m termination_message_path   = "/dev/termination-log"
                      [32m+[0m[0m termination_message_policy = (known after apply)
                      [32m+[0m[0m tty                        = false

                      [32m+[0m[0m env {
                          [32m+[0m[0m name  = "WORDPRESS_DB_HOST"
                          [32m+[0m[0m value = "mariadb-service"
                        }
                      [32m+[0m[0m env {
                          [32m+[0m[0m name  = "WORDPRESS_DB_PASSWORD"
                          [32m+[0m[0m value = "P@ssw0rd"
                        }

                      [32m+[0m[0m port {
                          [32m+[0m[0m container_port = 80
                          [32m+[0m[0m protocol       = "TCP"
                        }
                    }
                }
            }
        }
    }

[1m  # kubernetes_persistent_volume_claim.mariadb-pvc[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_persistent_volume_claim" "mariadb-pvc" {
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m wait_until_bound = true

      [32m+[0m[0m metadata {
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m labels           = {
              [32m+[0m[0m "app" = "mariadb-pvc"
            }
          [32m+[0m[0m name             = "mariadb-pvc"
          [32m+[0m[0m namespace        = "default"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }

      [32m+[0m[0m spec {
          [32m+[0m[0m access_modes       = [
              [32m+[0m[0m "ReadWriteOnce",
            ]
          [32m+[0m[0m storage_class_name = (known after apply)
          [32m+[0m[0m volume_mode        = (known after apply)
          [32m+[0m[0m volume_name        = (known after apply)

          [32m+[0m[0m resources {
              [32m+[0m[0m requests = {
                  [32m+[0m[0m "storage" = "10Gi"
                }
            }
        }
    }

[1m  # kubernetes_service.mariadb[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_service" "mariadb" {
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m wait_for_load_balancer = true

      [32m+[0m[0m metadata {
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "mariadb-service"
          [32m+[0m[0m namespace        = "default"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }

      [32m+[0m[0m spec {
          [32m+[0m[0m allocate_load_balancer_node_ports = true
          [32m+[0m[0m cluster_ip                        = (known after apply)
          [32m+[0m[0m cluster_ips                       = (known after apply)
          [32m+[0m[0m external_traffic_policy           = (known after apply)
          [32m+[0m[0m health_check_node_port            = (known after apply)
          [32m+[0m[0m internal_traffic_policy           = (known after apply)
          [32m+[0m[0m ip_families                       = (known after apply)
          [32m+[0m[0m ip_family_policy                  = (known after apply)
          [32m+[0m[0m publish_not_ready_addresses       = false
          [32m+[0m[0m selector                          = {
              [32m+[0m[0m "app" = "mariadb"
            }
          [32m+[0m[0m session_affinity                  = "None"
          [32m+[0m[0m type                              = "ClusterIP"

          [32m+[0m[0m port {
              [32m+[0m[0m node_port   = (known after apply)
              [32m+[0m[0m port        = 3306
              [32m+[0m[0m protocol    = "TCP"
              [32m+[0m[0m target_port = "3306"
            }
        }
    }

[1m  # kubernetes_service.wordpress[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_service" "wordpress" {
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m wait_for_load_balancer = true

      [32m+[0m[0m metadata {
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "wordpress-service"
          [32m+[0m[0m namespace        = "default"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }

      [32m+[0m[0m spec {
          [32m+[0m[0m allocate_load_balancer_node_ports = true
          [32m+[0m[0m cluster_ip                        = (known after apply)
          [32m+[0m[0m cluster_ips                       = (known after apply)
          [32m+[0m[0m external_traffic_policy           = (known after apply)
          [32m+[0m[0m health_check_node_port            = (known after apply)
          [32m+[0m[0m internal_traffic_policy           = (known after apply)
          [32m+[0m[0m ip_families                       = (known after apply)
          [32m+[0m[0m ip_family_policy                  = (known after apply)
          [32m+[0m[0m publish_not_ready_addresses       = false
          [32m+[0m[0m selector                          = {
              [32m+[0m[0m "app" = "wordpress"
            }
          [32m+[0m[0m session_affinity                  = "None"
          [32m+[0m[0m type                              = "LoadBalancer"

          [32m+[0m[0m port {
              [32m+[0m[0m node_port   = (known after apply)
              [32m+[0m[0m port        = 80
              [32m+[0m[0m protocol    = "TCP"
              [32m+[0m[0m target_port = "80"
            }
        }
    }

[1m  # random_id.log_analytics_workspace_name_suffix[0m will be created
[0m  [32m+[0m[0m resource "random_id" "log_analytics_workspace_name_suffix" {
      [32m+[0m[0m b64_std     = (known after apply)
      [32m+[0m[0m b64_url     = (known after apply)
      [32m+[0m[0m byte_length = 8
      [32m+[0m[0m dec         = (known after apply)
      [32m+[0m[0m hex         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
    }

[1m  # random_pet.rg_name[0m will be created
[0m  [32m+[0m[0m resource "random_pet" "rg_name" {
      [32m+[0m[0m id        = (known after apply)
      [32m+[0m[0m length    = 2
      [32m+[0m[0m prefix    = "rg"
      [32m+[0m[0m separator = "-"
    }

[1mPlan:[0m 11 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m client_certificate     = (sensitive value)
  [32m+[0m[0m client_key             = (sensitive value)
  [32m+[0m[0m cluster_ca_certificate = (sensitive value)
  [32m+[0m[0m cluster_password       = (sensitive value)
  [32m+[0m[0m cluster_username       = (sensitive value)
  [32m+[0m[0m host                   = (sensitive value)
  [32m+[0m[0m kube_config            = (sensitive value)
  [32m+[0m[0m resource_group_name    = (known after apply)
[90m
─────────────────────────────────────────────────────────────────────────────[0m


